const express=require("express"),cors=require("cors"),conn=require("./db/conn"),mainRouter=require("./routes/router"),app=express(),port=3e3,CreateUserDTO=(conn(),app.use(cors()),app.use(express.json()),app.use("/",mainRouter),app.all("*",(e,s)=>{s.status(404).send({message:"Rota não encontrada"})}),app.listen(port,()=>{console.log("Example app listening on port "+port)}),require("../dtos/CreateUserDTO")),UserSiginDTO=require("../dtos/UserSignInDTO"),SearchUserUseCase=require("../use-cases/SearchUserUseCase"),SignInUseCase=require("../use-cases/SignInUseCase"),SignUpUseCase=require("../use-cases/SignUpUseCase"),z=require("zod")["z"];class UserController{#signUpUseCase;#signInUseCase;#searchUserUseCase;constructor(){this.#signUpUseCase=new SignUpUseCase,this.#signInUseCase=new SignInUseCase,this.#searchUserUseCase=new SearchUserUseCase}async signUp(e,s){var r,a,o,e=z.object({nome:z.string(),email:z.string().email(),senha:z.string(),telefones:z.array(z.object({numero:z.string(),ddd:z.string()}))}).safeParse(e.body);return e.success?({nome:e,email:o,senha:r,telefones:a}=e.data,e=new CreateUserDTO(e,o,r,a),"string"==typeof(o=await this.#signUpUseCase.execute(e))?s.status(400).json({message:"E-mail já existente"}):s.status(200).json(o)):s.status(400).send({message:"Dados inconsistentes"})}async signIn(e,s){var r,e=z.object({email:z.string().email(),senha:z.string()}).safeParse(e.body);return e.success?({email:e,senha:r}=e.data,e=new UserSiginDTO(e,r),(r=await this.#signInUseCase.execute(e)).userNotFound?s.status(400).send({message:"Usuário e/ou senha inválidos"}):r.passwordIncorrect?s.status(401).send({message:"Usuário e/ou senha inválidos"}):s.status(200).send(r)):s.status(400).send({message:"Dados inconsistentes"})}async searchUser(e,s){var[e,r]=e.headers.authorization?.split(" ");return"Bearer"!==e?s.status(400).send():"string"==typeof(e=this.#searchUserUseCase.execute(r))?s.status(400).send({message:e}):s.status(200).send(e)}}const userController=new UserController,mongoose=(module.exports=userController,require("mongoose")),conn=(require("dotenv").config(),async()=>{try{await mongoose.connect(process.env.CONNECTION_STRING),console.log("conectado!")}catch(e){console.log(e)}});module.exports=conn;class CreateUserDTO{nome;email;senha;telefones;constructor(e,s,r,a){this.nome=e,this.email=s,this.senha=r,this.telefones=a}}module.exports=CreateUserDTO;class UserSiginDTO{email;senha;constructor(e,s){this.email=e,this.senha=s}}module.exports=UserSiginDTO;const mongoose=require("mongoose"),Schema=mongoose["Schema"],phoneSchema=new Schema({numero:{type:String,required:!0},ddd:{type:String,required:!0}}),Phone=mongoose.model("Phone",phoneSchema),mongoose=(module.exports={Phone:Phone,phoneSchema:phoneSchema},require("mongoose")),phoneSchema=require("./Phone")["phoneSchema"],Schema=mongoose["Schema"],userSchema=new Schema({id:{type:String,required:!0},nome:{type:String,required:!0},senha:{type:String,required:!0},email:{type:String,required:!0},telefones:{type:[phoneSchema]},data_criacao:Date,data_atualizacao:Date,ultimo_login:Date,token:String}),User=mongoose.model("User",userSchema),CreateUserDTO=(module.exports=User,require("../dtos/CreateUserDTO")),User=require("../models/User"),uuidv4=require("uuid")["v4"];class UserRepository{async getSignInUSer(e){return await User.findOne({email:e})}async saveUser(e){var{nome:s,email:r,senha:a,telefones:o}=e;return await User.findOne({email:r})?null:(new CreateUserDTO(s,r,a,o),s={id:uuidv4(),data_criacao:new Date,data_atualizacao:new Date,ultimo_login:new Date},r={...e,...s},await User.create(r))}async updateUsersLastLogin(e){return await User.updateOne({id:e},{$set:{ultimo_login:new Date}})}}module.exports=UserRepository;const conn=require("../db/conn"),faker=require("@faker-js/faker")["fakerDE"],UserRepository=require("./UserRepository"),mainRouter=(describe("conexao com o banco de dados",()=>{beforeAll(()=>{conn()});const s=new UserRepository;describe("criação de um usuário",()=>{it("sucesso caso o usuario nao existir",async()=>{var e={nome:"Pedro",email:faker.internet.email(),senha:"123",telefones:[{numero:"12345667",ddd:"1234"}]},e=await s.saveUser(e);expect(e).not.toBe(null)}),it("erro caso usuario ja existir",async()=>{var e=await s.saveUser({nome:"Pedro",email:"teste@email.com",senha:"123",telefones:[{numero:"12345667",ddd:"1234"}]});expect(e).toBe(null)})}),it("retornar usuario se estiver no banco de dados",async()=>{var e=await s.getSignInUSer("emailasdasd@email.com");expect(e).not.toBe(null)})}),require("express").Router()),userController=require("../controllers/UserController"),CreateUserDTO=(mainRouter.route("/user/new").post((e,s)=>userController.signUp(e,s)),mainRouter.route("/user/signin").post((e,s)=>userController.signIn(e,s)),mainRouter.route("/user/search").post((e,s)=>userController.searchUser(e,s)),module.exports=mainRouter,require("../dtos/CreateUserDTO")),faker=require("@faker-js/faker")["fakerDE"],fetchData=require("../test/fetch"),UserSiginDTO=require("../dtos/UserSignInDTO"),TokenService=require("../service/TokenService"),bcrypt=(describe("teste das rotas",()=>{describe("rota de signUp",()=>{const s="http://localhost:3000/user/new";it("dados enviados corretamente para o servidor",async()=>{var e=new CreateUserDTO("Pedro",faker.internet.email(),"senha",[{numero:"1234",ddd:"11"}]),e=await fetchData(e,s);expect(e.status).toBe(200)}),it("dados inconsistentes enviados o servidor",async()=>{var e=new CreateUserDTO("Pedro","asdasdasd","senha",[{numero:"1234"}]),e=await fetchData(e,s);expect(e.status).toBe(400)}),it("email já existir no banco de dados",async()=>{var e=new CreateUserDTO("Pedro","teste@email.com","123",[{numero:"1234",ddd:"11"}]),e=await(await fetchData(e,s)).json();expect(e.message).toBe("E-mail já existente")})}),describe("rota de signIn",()=>{const r="http://localhost:3000/user/signin";it("usuario existir e os dados estiverem corretos",async()=>{var e=new UserSiginDTO("teste@email.com","123"),e=await fetchData(e,r);expect(e.status).toBe(200)}),it("usuario nao existir no banco de dados",async()=>{var e=new UserSiginDTO("emailNaoCadastrado@email.com","123"),e=await(await fetchData(e,r)).json();expect(e.message).toBe("Usuário e/ou senha inválidos")}),it("email cadastrado mas senha invalida",async()=>{var e=new UserSiginDTO("teste@email.com","senhaIncorreta"),e=await fetchData(e,r),s=await e.json();expect("Usuário e/ou senha inválidos"===s.message&&401===e.status).toBe(!0)})}),describe("rota de busca",()=>{const s="http://localhost:3000/user/search";it("token valido",async()=>{var e=(new TokenService).generateToken({id:"12314",name:"nome",email:"email@email.com"}),e=await fetch(s,{method:"POST",headers:{Authorization:"Bearer "+e}});expect(e.status).toBe(200)}),it("token invalido",async()=>{var e=await(await fetch(s,{method:"POST",headers:{Authorization:"Bearer eyJhbGsciOiJIUzI1NiIsInasR5cCI6IkpXVCJ9.eyJpZCI6ImFlZDNlNmJmLWI3ZDgtNGJmMy1hNzBhLWY4NzhjOGM3YWViZCIsIm5vbWUiOiJQZWRybyIsImVtYWlsIjoidGVzYXRhc2RhZUBlbWFpbC5jb20iLCJpYXQiOjE3MDI0MDc3ODMsImV4cCI6MTcwMjQwOTU4M30.hQTfHHM9txUqjl1bLvkZj-P9x31Kwv4h17f7DY0Gl6Y"}})).json();expect(e.message).toBe("Não autorizado")}),it("token expirado",async()=>{var e=await(await fetch(s,{method:"POST",headers:{Authorization:"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyOTI3OTRmLWE5MzItNDg5Mi1iYzQ3LTVjMWUwZjAyMGI1ZiIsIm5vbWUiOiJQZWRybyIsImVtYWlsIjoidGVzdGVAZW1haWwuY29tIiwiaWF0IjoxNzAyNDExMjY2LCJleHAiOjE3MDI0MTMwNjZ9.llB82RuprTqZc1o2c4tvWsFBrlJllGXTqCZQHqdPUSc"}})).json();expect(e.message).toBe("Sessão inválida")})})}),require("bcrypt"));class PasswordService{constructor(){}async generatePasswordHas(e){var s=await bcrypt.genSalt(10);return await bcrypt.hash(e,s)}async comparePassword(e,s){return bcrypt.compare(e,s)}}module.exports=PasswordService;const PasswordService=require("./PasswordService");describe("geração e comparação da senha",()=>{const s=new PasswordService,r="123";it("Gerar senha",async()=>{var e=await s.generatePasswordHas(r);expect("string"==typeof e).toBeTruthy()}),it("retornar falso se as senhas divergirem",async()=>{var e=await s.generatePasswordHas(r),e=await s.comparePassword("abc",e);expect(e).toBeFalsy()}),it("retornar true se forem as mesmas",async()=>{var e=await s.generatePasswordHas(r),e=s.comparePassword(r,e);expect(e).toBeTruthy()})});var jwt=require("jsonwebtoken");class TokenService{#secret="segredoJWT";generateToken(e){return jwt.sign({id:e.id,nome:e.nome,email:e.email},this.#secret,{expiresIn:1800})}verifyToken(e){try{return{token:jwt.verify(e,this.#secret)}}catch(e){return"jwt expired"===e.message?"Sessão inválida":"invalid token"===e.message?"Não autorizado":void 0}}}module.exports=TokenService;const TokenService=require("./TokenService");async function fetchData(e,s){return await fetch(s,{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}})}it("geracao do token",()=>{var e=(new TokenService).generateToken({id:"asd",nome:"asdad",email:"email@email.com"});expect("string"==typeof e).toBe(!0)}),describe("verificação do token",()=>{const s=new TokenService,r={id:"asd",nome:"asdad",email:"email@email.com"};it("token valido",()=>{var e=s.generateToken(r),e=s.verifyToken(e);expect("object"==typeof e).toBe(!0)}),it("token invalido",()=>{var e=s.verifyToken("eyJhbGsciOiJIUzI1NiIsInasR5cCI6IkpXVCJ9.eyJpZCI6ImFlZDNlNmJmLWI3ZDgtNGJmMy1hNzBhLWY4NzhjOGM3YWViZCIsIm5vbWUiOiJQZWRybyIsImVtYWlsIjoidGVzYXRhc2RhZUBlbWFpbC5jb20iLCJpYXQiOjE3MDI0MDc3ODMsImV4cCI6MTcwMjQwOTU4M30.hQTfHHM9txUqjl1bLvkZj-P9x31Kwv4h17f7DY0Gl6Y");expect("Não autorizado"===e).toBe(!0)}),it("token expirado",()=>{var e=s.verifyToken("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyOTI3OTRmLWE5MzItNDg5Mi1iYzQ3LTVjMWUwZjAyMGI1ZiIsIm5vbWUiOiJQZWRybyIsImVtYWlsIjoidGVzdGVAZW1haWwuY29tIiwiaWF0IjoxNzAyNDExMjY2LCJleHAiOjE3MDI0MTMwNjZ9.llB82RuprTqZc1o2c4tvWsFBrlJllGXTqCZQHqdPUSc");expect("Sessão inválida"===e).toBe(!0)})}),module.exports=fetchData;const TokenService=require("../service/TokenService");class SearchUserUseCase{#tokenService;constructor(){this.#tokenService=new TokenService}execute(e){return this.#tokenService.verifyToken(e)}}module.exports=SearchUserUseCase;const TokenService=require("../service/TokenService"),SearchUserUseCase=require("./SearchUserUseCase"),UserRepository=(describe("verificação do token",()=>{const s=new SearchUserUseCase,r=new TokenService,a={id:"asd",nome:"asdad",email:"email@email.com"};it("token valido",()=>{var e=r.generateToken(a),e=s.execute(e);expect("object"==typeof e).toBe(!0)}),it("token invalido",()=>{var e=s.execute("eyJhbGsciOiJIUzI1NiIsInasR5cCI6IkpXVCJ9.eyJpZCI6ImFlZDNlNmJmLWI3ZDgtNGJmMy1hNzBhLWY4NzhjOGM3YWViZCIsIm5vbWUiOiJQZWRybyIsImVtYWlsIjoidGVzYXRhc2RhZUBlbWFpbC5jb20iLCJpYXQiOjE3MDI0MDc3ODMsImV4cCI6MTcwMjQwOTU4M30.hQTfHHM9txUqjl1bLvkZj-P9x31Kwv4h17f7DY0Gl6Y");expect("Não autorizado"===e).toBe(!0)})}),require("../repositories/UserRepository")),PasswordService=require("../service/PasswordService"),TokenService=require("../service/TokenService");class SignInUseCase{#userRepository;#passwordService;#tokenService;constructor(){this.#userRepository=new UserRepository,this.#passwordService=new PasswordService,this.#tokenService=new TokenService}async execute(e){var s,r,a,{email:e,senha:o}=e,e=await this.#userRepository.getSignInUSer(e);return e?await this.#passwordService.comparePassword(o,e.senha)?({id:o,data_criacao:s,data_atualizacao:r,ultimo_login:a}=e,e=this.#tokenService.generateToken(e),await this.#userRepository.updateUsersLastLogin(o),{id:o,data_criacao:s,data_atualizacao:r,ultimo_login:a,token:e}):{passwordIncorrect:!0}:{userNotFound:!0}}}module.exports=SignInUseCase;const SignInUseCase=require("./SignInUseCase"),conn=require("../db/conn"),UserRepository=(describe("fazer login do usuario",()=>{beforeAll(()=>{conn()});const s=new SignInUseCase;it("retornar dados se existir no banco de dados",async()=>{var e=await s.execute({email:"testasde@email.com",senha:"123"});expect(e.hasOwnProperty("token")).toBeTruthy()}),it("retornar objeto {passwordIncorret} caso email estiver certo mas a senha for incorreta",async()=>{var e=await s.execute({email:"testasde@email.com",senha:"senha incorreta"});expect(e.hasOwnProperty("passwordIncorrect")).toBeTruthy()}),it("retornar objeto {userNotFound} caso email nao estiver cadastrado",async()=>{var e=await s.execute({email:"emailTesteNaoCadastrado@email.com",senha:"123"});expect(e.hasOwnProperty("userNotFound")).toBeTruthy()})}),require("../repositories/UserRepository")),PasswordService=require("../service/PasswordService"),TokenService=require("../service/TokenService");class SignUpUseCase{#userRepository;#passwordService;#tokenService;constructor(){this.#userRepository=new UserRepository,this.#passwordService=new PasswordService,this.#tokenService=new TokenService}async execute(e){var s,r,a,o=await this.#passwordService.generatePasswordHas(e.senha),o=(e={...e,senha:o},await this.#userRepository.saveUser(e));return o?({id:e,data_criacao:s,data_atualizacao:r,ultimo_login:a}=o,{id:e,data_criacao:s,data_atualizacao:r,ultimo_login:a,token:this.#tokenService.generateToken(o)}):"E-mail ja existente"}}module.exports=SignUpUseCase;const SignUpUseCase=require("./SignUpUseCase"),conn=require("../db/conn"),faker=require("@faker-js/faker")["fakerDE"];describe("criação de um usuário",()=>{beforeAll(()=>{conn()});const s=new SignUpUseCase;it("sucesso caso o usuario nao existir",async()=>{var e={nome:"Pedro",email:faker.internet.email(),senha:"123",telefones:[{numero:"12345667",ddd:"1234"}]},e=await s.execute(e);expect(e.hasOwnProperty("token")).toBeTruthy()}),it("erro caso usuario ja existir",async()=>{var e=await s.execute({nome:"Pedro",email:"teste@email.com",senha:"123",telefones:[{numero:"12345667",ddd:"1234"}]});expect("E-mail ja existente"===e).toBeTruthy()})});